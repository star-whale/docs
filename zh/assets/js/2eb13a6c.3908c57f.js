"use strict";(self.webpackChunkstarwhale_docs=self.webpackChunkstarwhale_docs||[]).push([[7938],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=r,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return t?a.createElement(h,o(o({ref:n},u),{},{components:t})):a.createElement(h,o({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},58797:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(83117),r=(t(67294),t(3905));const i={title:"runtime.yaml \u4f7f\u7528\u6307\u5357"},o=void 0,l={unversionedId:"runtime/yaml",id:"version-0.5.10/runtime/yaml",title:"runtime.yaml \u4f7f\u7528\u6307\u5357",description:"runtime.yaml \u662f\u6784\u5efa Starwhale \u8fd0\u884c\u65f6\u7684\u63cf\u8ff0\u6587\u4ef6\uff0c\u7528\u6237\u53ef\u4ee5\u7ec6\u7c92\u5ea6\u7684\u5b9a\u4e49 Starwhale \u8fd0\u884c\u65f6\u7684\u5404\u79cd\u5c5e\u6027\u3002\u5f53\u4f7f\u7528 swcli runtime build \u547d\u4ee4\u4e2d yaml \u6a21\u5f0f\u65f6\uff0c\u9700\u8981\u63d0\u4f9b runtime.yaml \u6587\u4ef6\u3002",source:"@site/i18n/zh/docusaurus-plugin-content-docs/version-0.5.10/runtime/yaml.md",sourceDirName:"runtime",slug:"/runtime/yaml",permalink:"/zh/runtime/yaml",draft:!1,editUrl:"https://github.com/star-whale/docs/tree/main/versioned_docs/version-0.5.10/runtime/yaml.md",tags:[],version:"0.5.10",frontMatter:{title:"runtime.yaml \u4f7f\u7528\u6307\u5357"},sidebar:"mainSidebar",previous:{title:"Starwhale \u8fd0\u884c\u65f6",permalink:"/zh/runtime/"},next:{title:"Starwhale \u6570\u636e\u96c6",permalink:"/zh/dataset/"}},s={},c=[{value:"\u4f7f\u7528\u793a\u4f8b",id:"\u4f7f\u7528\u793a\u4f8b",level:2},{value:"\u6700\u7b80\u793a\u4f8b",id:"\u6700\u7b80\u793a\u4f8b",level:3},{value:"llama2 \u793a\u4f8b",id:"llama2-\u793a\u4f8b",level:3},{value:"\u5b8c\u6574\u5b57\u6bb5\u793a\u4f8b",id:"\u5b8c\u6574\u5b57\u6bb5\u793a\u4f8b",level:3}],u={toc:c};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"runtime.yaml")," \u662f\u6784\u5efa Starwhale \u8fd0\u884c\u65f6\u7684\u63cf\u8ff0\u6587\u4ef6\uff0c\u7528\u6237\u53ef\u4ee5\u7ec6\u7c92\u5ea6\u7684\u5b9a\u4e49 Starwhale \u8fd0\u884c\u65f6\u7684\u5404\u79cd\u5c5e\u6027\u3002\u5f53\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"swcli runtime build")," \u547d\u4ee4\u4e2d ",(0,r.kt)("inlineCode",{parentName:"p"},"yaml")," \u6a21\u5f0f\u65f6\uff0c\u9700\u8981\u63d0\u4f9b ",(0,r.kt)("inlineCode",{parentName:"p"},"runtime.yaml")," \u6587\u4ef6\u3002"),(0,r.kt)("h2",{id:"\u4f7f\u7528\u793a\u4f8b"},"\u4f7f\u7528\u793a\u4f8b"),(0,r.kt)("h3",{id:"\u6700\u7b80\u793a\u4f8b"},"\u6700\u7b80\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"dependencies:\n  - pip:\n      - numpy\nname: simple-test\n")),(0,r.kt)("p",null,"\u5b9a\u4e49\u4e00\u4e2a\u4ee5 ",(0,r.kt)("inlineCode",{parentName:"p"},"venv")," \u4f5c\u4e3aPython \u5305\u9694\u79bb\u65b9\u5f0f\uff0c\u5b89\u88c5numpy\u4f9d\u8d56\u7684 Starwhale \u8fd0\u884c\u65f6\u3002"),(0,r.kt)("h3",{id:"llama2-\u793a\u4f8b"},"llama2 \u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'name: llama2\nmode: venv\nenvironment:\n  arch: noarch\n  os: ubuntu:20.04\n  cuda: 11.7\n  python: "3.10"\ndependencies:\n  - pip:\n      - torch\n      - fairscale\n      - fire\n      - sentencepiece\n      - gradio >= 3.37.0\n      # external starwhale dependencies\n      - starwhale[serve] >= 0.5.5\n')),(0,r.kt)("h3",{id:"\u5b8c\u6574\u5b57\u6bb5\u793a\u4f8b"},"\u5b8c\u6574\u5b57\u6bb5\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# [required]The name of Starwhale Runtime\nname: demo\n# [optional]The mode of Starwhale Runtime: venv or conda. Default is venv.\nmode: venv\n# [optional]The configurations of pip and conda.\nconfigs:\n  # If you do not use conda, ignore this field.\n  conda:\n    condarc: # custom condarc config file\n      channels:\n        - defaults\n      show_channel_urls: true\n      default_channels:\n        - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n        - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n        - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\n      custom_channels:\n        conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n        pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n        pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n        nvidia: https://mirrors.aliyun.com/anaconda/cloud\n      ssl_verify: false\n      default_threads: 10\n  pip:\n    # pip config set global.index-url\n    index_url: https://example.org/\n    # pip config set global.extra-index-url\n    extra_index_url: https://another.net/\n    # pip config set install.trusted-host\n    trusted_host:\n      - example.org\n      - another.net\n# [optional] The definition of the environment.\nenvironment:\n  # Now it must be ubuntu:20.04\n  os: ubuntu:20.04\n  # CUDA version. possible values: 11.3, 11.4, 11.5, 11.6, 11.7\n  cuda: 11.4\n  # Python version. possible values: 3.7, 3.8, 3.9, 3.10, 3.11\n  python: 3.8\n  # Define your custom base image\n  docker:\n    image: mycustom.com/docker/image:tag\n# [required] The dependencies of the Starwhale Runtime.\ndependencies:\n  # If this item is present, conda env create -f conda.yml will be executed\n  - conda.yaml\n  # If this item is present, pip install -r requirements.txt will be executed before installing other pip packages\n  - requirements.txt\n  # Packages to be install with conda. venv mode will ignore the conda field.\n  - conda:\n    - numpy\n    - requests\n  # Packages to be installed with pip. The format is the same as requirements.txt\n  - pip:\n    - pillow\n    - numpy\n    - deepspeed==0.9.0\n    - safetensors==0.3.0\n    - transformers @ git+https://github.com/huggingface/transformers.git@3c3108972af74246bc3a0ecf3259fd2eafbacdef\n    - peft @ git+https://github.com/huggingface/peft.git@fcff23f005fc7bfb816ad1f55360442c170cd5f5\n    - accelerate @ git+https://github.com/huggingface/accelerate.git@eba6eb79dc2ab652cd8b44b37165a4852768a8ac\n  # Additional wheels packages to be installed when restoring the runtime\n  - wheels:\n      - dummy-0.0.0-py3-none-any.whl\n  # Additional files to be included in the runtime\n  - files:\n      - dest: bin/prepare.sh\n        name: prepare\n        src: scripts/prepare.sh\n  # Run some custom commands\n  - commands:\n      - apt-get install -y libgl1\n      - touch /tmp/runtime-command-run.flag\n")))}m.isMDXComponent=!0}}]);
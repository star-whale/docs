"use strict";(self.webpackChunkstarwhale_docs=self.webpackChunkstarwhale_docs||[]).push([[5467],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,h=m["".concat(u,".").concat(d)]||m[d]||p[d]||i;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2180:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(3117),r=(n(7294),n(3905));const i={title:"Starwhale \u8fd0\u884c\u65f6"},l=void 0,o={unversionedId:"userguide/runtime",id:"version-0.5.7/userguide/runtime",title:"Starwhale \u8fd0\u884c\u65f6",description:"\u6982\u89c8",source:"@site/i18n/zh/docusaurus-plugin-content-docs/version-0.5.7/userguide/runtime.md",sourceDirName:"userguide",slug:"/userguide/runtime",permalink:"/zh/0.5.7/userguide/runtime",draft:!1,editUrl:"https://github.com/star-whale/docs/tree/main/versioned_docs/version-0.5.7/userguide/runtime.md",tags:[],version:"0.5.7",frontMatter:{title:"Starwhale \u8fd0\u884c\u65f6"},sidebar:"mainSidebar",previous:{title:"Starwhale \u6a21\u578b",permalink:"/zh/0.5.7/userguide/model"},next:{title:"\u6982\u8ff0",permalink:"/zh/0.5.7/reference/swcli/"}},u={},s=[{value:"\u6982\u89c8",id:"\u6982\u89c8",level:2},{value:"\u57fa\u7840\u955c\u50cf",id:"\u57fa\u7840\u955c\u50cf",level:2},{value:"runtime.yaml \u5b9a\u4e49",id:"yaml",level:2}],c={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u6982\u89c8"},"\u6982\u89c8"),(0,r.kt)("p",null,"Starwhale \u8fd0\u884c\u65f6\u80fd\u591f\u9488\u5bf9\u8fd0\u884cPython\u7a0b\u5e8f\uff0c\u63d0\u4f9b\u4e00\u79cd\u53ef\u590d\u73b0\u3001\u53ef\u5206\u4eab\u7684\u8fd0\u884c\u73af\u5883\u3002\u4f7f\u7528 Starwhale \u8fd0\u884c\u65f6\uff0c\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u7684\u4e0e\u4ed6\u4eba\u5206\u4eab\uff0c\u5e76\u4e14\u80fd\u5728 Starwhale Server \u548c Starwhale Cloud \u5b9e\u4f8b\u4e0a\u4f7f\u7528 Starwhale \u8fd0\u884c\u65f6\u3002"),(0,r.kt)("p",null,"Starwhale \u8fd0\u884c\u65f6\u4f7f\u7528 venv, conda \u548c docker \u7b49\u57fa\u7840\u6280\u672f\uff0c\u5982\u679c\u60a8\u5f53\u524d\u6b63\u5728\u4f7f\u7528\u8fd9\u4e9b\u6280\u672f\uff0c\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u7684\u5c06\u8fd9\u4e2a\u73af\u5883\u8f6c\u5316\u4e3a Starwhale \u8fd0\u884c\u65f6\u3002"),(0,r.kt)("p",null,"\u5bf9\u4e8e\u672c\u5730\u73af\u5883\uff0cStarwhale \u8fd0\u884c\u65f6\u652f\u6301\u975e\u5e38\u5bb9\u6613\u7684\u591a\u79cd\u73af\u5883\u7ba1\u7406\u548c\u5207\u6362\u3002Starwhale \u8fd0\u884c\u65f6\u5305\u542b\u57fa\u7840\u955c\u50cf\u548c\u73af\u5883\u4f9d\u8d56\u4e24\u4e2a\u90e8\u5206\u3002"),(0,r.kt)("h2",{id:"\u57fa\u7840\u955c\u50cf"},"\u57fa\u7840\u955c\u50cf"),(0,r.kt)("p",null,"Starwhale \u57fa\u7840\u955c\u50cf\u4e2d\u4f1a\u5b89\u88c5 Python, CUDA, cuDNN \u548c\u5176\u4ed6\u4e00\u4e9b\u673a\u5668\u5b66\u4e60\u5f00\u53d1\u4e2d\u5fc5\u8981\u7684\u57fa\u7840\u5e93\u3002Starwhale \u8fd0\u884c\u65f6\u63d0\u4f9b\u591a\u79cd\u57fa\u7840\u955c\u50cf\u4f9b\u9009\u62e9\uff0c\u5217\u8868\u5982\u4e0b\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4f53\u7cfb\u7ed3\u6784:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"X86 (amd64)"),(0,r.kt)("li",{parentName:"ul"},"Arm (aarch64)"))),(0,r.kt)("li",{parentName:"ul"},"\u64cd\u4f5c\u7cfb\u7edf:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Ubuntu 20.04 LTS (ubuntu:20.04)"))),(0,r.kt)("li",{parentName:"ul"},"Python:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"3.7"),(0,r.kt)("li",{parentName:"ul"},"3.8"),(0,r.kt)("li",{parentName:"ul"},"3.9"),(0,r.kt)("li",{parentName:"ul"},"3.10"),(0,r.kt)("li",{parentName:"ul"},"3.11"))),(0,r.kt)("li",{parentName:"ul"},"CUDA:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"CUDA 11.3 + cuDNN 8.4"),(0,r.kt)("li",{parentName:"ul"},"CUDA 11.4 + cuDNN 8.4"),(0,r.kt)("li",{parentName:"ul"},"CUDA 11.5 + cuDNN 8.4"),(0,r.kt)("li",{parentName:"ul"},"CUDA 11.6 + cuDNN 8.4"),(0,r.kt)("li",{parentName:"ul"},"CUDA 11.7")))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"runtime.yaml")," \u901a\u8fc7\u76f8\u5173\u8bbe\u7f6e\u6765\u51b3\u5b9a\u4f7f\u7528\u4f55\u79cd\u57fa\u7840\u955c\u50cf\u3002"),(0,r.kt)("h2",{id:"yaml"},"runtime.yaml \u5b9a\u4e49"),(0,r.kt)("p",null,"Starwhale \u8fd0\u884c\u65f6\u53ef\u4ee5\u901a\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"p"},"runtime.yaml")," \u8fdb\u884c\u5b9a\u4e49\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# The name of Starwhale Runtime\nname: demo\n# The mode of Starwhale Runtime: venv or conda. Default is venv.\nmode: venv\nconfigs:\n  # If you do not use conda, ignore this field.\n  conda:\n    condarc: # custom condarc config file\n      channels:\n        - defaults\n      show_channel_urls: true\n      default_channels:\n        - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n        - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n        - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\n      custom_channels:\n        conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n        pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n        pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n        nvidia: https://mirrors.aliyun.com/anaconda/cloud\n      ssl_verify: false\n      default_threads: 10\n  pip:\n    # pip config set global.index-url\n    index_url: https://example.org/\n    # pip config set global.extra-index-url\n    extra_index_url: https://another.net/\n    # pip config set install.trusted-host\n    trusted_host:\n      - example.org\n      - another.net\nenvironment:\n  # Now it must be ubuntu:20.04\n  os: ubuntu:20.04\n  # CUDA version. possible values: 11.3, 11.4, 11.5, 11.6, 11.7\n  cuda: 11.4\n  # Python version. possible values: 3.7, 3.8, 3.9, 3.10, 3.11\n  python: 3.8\n  # Define your custom base image\n  docker:\n    image: mycustom.com/docker/image:tag\ndependencies:\n  # If this item is present, conda env create -f conda.yml will be executed\n  - conda.yaml\n  # If this item is present, pip install -r requirements.txt will be executed before installing other pip packages\n  - requirements.txt\n  # Packages to be install with conda. venv mode will ignore the conda field.\n  - conda:\n    - numpy\n    - requests\n  # Packages to be installed with pip. The format is the same as requirements.txt\n  - pip:\n    - pillow\n    - numpy\n    - deepspeed==0.9.0\n    - safetensors==0.3.0\n    - transformers @ git+https://github.com/huggingface/transformers.git@3c3108972af74246bc3a0ecf3259fd2eafbacdef\n    - peft @ git+https://github.com/huggingface/peft.git@fcff23f005fc7bfb816ad1f55360442c170cd5f5\n    - accelerate @ git+https://github.com/huggingface/accelerate.git@eba6eb79dc2ab652cd8b44b37165a4852768a8ac\n  # Additional wheels packages to be installed when restoring the runtime\n  - wheels:\n      - dummy-0.0.0-py3-none-any.whl\n  # Additional files to be included in the runtime\n  - files:\n      - dest: bin/prepare.sh\n        name: prepare\n        src: scripts/prepare.sh\n  # Run some custom commands\n  - commands:\n      - apt-get install -y libgl1\n      - touch /tmp/runtime-command-run.flag\n")))}p.isMDXComponent=!0}}]);
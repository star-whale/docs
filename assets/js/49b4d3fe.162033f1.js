"use strict";(self.webpackChunkstarwhale_docs=self.webpackChunkstarwhale_docs||[]).push([[1405],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,h=p["".concat(u,".").concat(d)]||p[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6220:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(3117),r=(n(7294),n(3905));const i={title:"Starwhale Runtime"},o=void 0,l={unversionedId:"runtime/index",id:"runtime/index",title:"Starwhale Runtime",description:"Overview",source:"@site/docs/runtime/index.md",sourceDirName:"runtime",slug:"/runtime/",permalink:"/next/runtime/",draft:!1,editUrl:"https://github.com/star-whale/docs/tree/main/docs/runtime/index.md",tags:[],version:"current",frontMatter:{title:"Starwhale Runtime"},sidebar:"mainSidebar",previous:{title:"The model.yaml Specification",permalink:"/next/model/yaml"},next:{title:"The runtime.yaml Specification",permalink:"/next/runtime/yaml"}},u={},s=[{value:"Overview",id:"overview",level:2},{value:"The base image",id:"the-base-image",level:2},{value:"runtime.yaml",id:"yaml",level:2}],c={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Starwhale Runtime aims to provide a reproducible and sharable running environment for python programs. You can easily share your working environment with your teammates or outsiders, and vice versa. Furthermore, you can run your programs on Starwhale Server or Starwhale Cloud without bothering with the dependencies."),(0,r.kt)("p",null,"Starwhale works well with virtualenv, conda, and docker. If you are using one of them, it is straightforward to create a Starwhale Runtime based on your current environment."),(0,r.kt)("p",null,"Multiple Starwhale Runtimes on your local machine can be switched freely by one command. You can work on different projects without messing up the environment.Starwhale Runtime consists of two parts: the base image and the dependencies."),(0,r.kt)("h2",{id:"the-base-image"},"The base image"),(0,r.kt)("p",null,"The base is a docker image with Python, CUDA, and cuDNN installed. Starwhale provides various base images for you to choose from; see the following list:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Computer system architecture:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"X86 (amd64)"),(0,r.kt)("li",{parentName:"ul"},"Arm (aarch64)"))),(0,r.kt)("li",{parentName:"ul"},"Operating system:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Ubuntu 20.04 LTS (ubuntu:20.04)"))),(0,r.kt)("li",{parentName:"ul"},"Python:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"3.7"),(0,r.kt)("li",{parentName:"ul"},"3.8"),(0,r.kt)("li",{parentName:"ul"},"3.9"),(0,r.kt)("li",{parentName:"ul"},"3.10"),(0,r.kt)("li",{parentName:"ul"},"3.11"))),(0,r.kt)("li",{parentName:"ul"},"CUDA:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"CUDA 11.3 + cuDNN 8.4"),(0,r.kt)("li",{parentName:"ul"},"CUDA 11.4 + cuDNN 8.4"),(0,r.kt)("li",{parentName:"ul"},"CUDA 11.5 + cuDNN 8.4"),(0,r.kt)("li",{parentName:"ul"},"CUDA 11.6 + cuDNN 8.4"),(0,r.kt)("li",{parentName:"ul"},"CUDA 11.7")))),(0,r.kt)("h2",{id:"yaml"},"runtime.yaml"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"runtime.yaml")," is the core configuration file of Starwhale Runtime."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# The name of Starwhale Runtime\nname: demo\n# The mode of Starwhale Runtime: venv or conda. Default is venv.\nmode: venv\nconfigs:\n  # If you do not use conda, ignore this field.\n  conda:\n    condarc: # custom condarc config file\n      channels:\n        - defaults\n      show_channel_urls: true\n      default_channels:\n        - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n        - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n        - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\n      custom_channels:\n        conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n        pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n        pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n        nvidia: https://mirrors.aliyun.com/anaconda/cloud\n      ssl_verify: false\n      default_threads: 10\n  pip:\n    # pip config set global.index-url\n    index_url: https://example.org/\n    # pip config set global.extra-index-url\n    extra_index_url: https://another.net/\n    # pip config set install.trusted-host\n    trusted_host:\n      - example.org\n      - another.net\nenvironment:\n  # Now it must be ubuntu:20.04\n  os: ubuntu:20.04\n  # CUDA version. possible values: 11.3, 11.4, 11.5, 11.6, 11.7\n  cuda: 11.4\n  # Python version. possible values: 3.7, 3.8, 3.9, 3.10, 3.11\n  python: 3.8\n  # Define your base image\n  docker:\n    image: mycustom.com/docker/image:tag\ndependencies:\n  # If this item is present, conda env create -f conda.yml will be executed\n  - conda.yaml\n  # If this item is present, pip install -r requirements.txt will be executed before installing other pip packages\n  - requirements.txt\n  # Packages to be install with conda. venv mode will ignore the conda field.\n  - conda:\n    - numpy\n    - requests \n  # Packages to be installed with pip. The format is the same as requirements.txt  \n  - pip:\n    - pillow\n    - numpy\n    - deepspeed==0.9.0\n    - safetensors==0.3.0\n    - transformers @ git+https://github.com/huggingface/transformers.git@3c3108972af74246bc3a0ecf3259fd2eafbacdef\n    - peft @ git+https://github.com/huggingface/peft.git@fcff23f005fc7bfb816ad1f55360442c170cd5f5\n    - accelerate @ git+https://github.com/huggingface/accelerate.git@eba6eb79dc2ab652cd8b44b37165a4852768a8ac\n  # Additional wheels packages to be installed when restoring the runtime\n  - wheels:\n      - dummy-0.0.0-py3-none-any.whl\n  # Additional files to be included in the runtime\n  - files:\n      - dest: bin/prepare.sh\n        name: prepare\n        src: scripts/prepare.sh\n  # Run some custom commands\n  - commands:\n      - apt-get install -y libgl1\n      - touch /tmp/runtime-command-run.flag\n")))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkstarwhale_docs=self.webpackChunkstarwhale_docs||[]).push([[2161],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,b=c["".concat(s,".").concat(d)]||c[d]||u[d]||l;return a?n.createElement(b,o(o({ref:t},m),{},{components:a})):n.createElement(b,o({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},56378:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=a(83117),r=(a(67294),a(3905));const l={title:"Starwhale Task SDK"},o=void 0,i={unversionedId:"reference/sdk/job",id:"version-0.5.12/reference/sdk/job",title:"Starwhale Task SDK",description:"job",source:"@site/versioned_docs/version-0.5.12/reference/sdk/job.md",sourceDirName:"reference/sdk",slug:"/reference/sdk/job",permalink:"/reference/sdk/job",draft:!1,editUrl:"https://github.com/star-whale/docs/tree/main/versioned_docs/version-0.5.12/reference/sdk/job.md",tags:[],version:"0.5.12",frontMatter:{title:"Starwhale Task SDK"},sidebar:"mainSidebar",previous:{title:"Starwhale Model SDK",permalink:"/reference/sdk/model"},next:{title:"Other SDK",permalink:"/reference/sdk/other"}},s={},p=[{value:"job",id:"job",level:2},{value:"Parameters",id:"job-func-params",level:3},{value:"Usage Example",id:"job-func-example",level:3},{value:"class starwhale.Job",id:"class-starwhalejob",level:2},{value:"list",id:"list",level:3},{value:"Parameters",id:"list-params",level:3},{value:"Usage Example",id:"list-example",level:3},{value:"get",id:"get",level:2},{value:"Usage Example",id:"get-example",level:3},{value:"summary",id:"summary",level:2},{value:"Usage Example",id:"summary-example",level:3},{value:"tables",id:"tables",level:3},{value:"Usage Example",id:"tables-example",level:3},{value:"get_table_rows",id:"get_table_rows",level:2},{value:"Parameters",id:"rows-params",level:3},{value:"Usage Example",id:"usage-example",level:3}],m={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"job"},"job"),(0,r.kt)("p",null,"Get a ",(0,r.kt)("inlineCode",{parentName:"p"},"starwhale.Job")," object through the Job URI parameter, which represents a Job on Standalone/Server/Cloud instances."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@classmethod\ndef job(\n    cls,\n    uri: str,\n) -> Job:\n")),(0,r.kt)("h3",{id:"job-func-params"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"uri"),": (str, required)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Job URI format.")))),(0,r.kt)("h3",{id:"job-func-example"},"Usage Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from starwhale import job\n\n# get job object of uri=https://server/job/1\nj1 = job("https://server/job/1")\n\n# get job from standalone instance\nj2 = job("local/project/self/job/xm5wnup")\nj3 = job("xm5wnup")\n')),(0,r.kt)("h2",{id:"class-starwhalejob"},"class starwhale.Job"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"starwhale.Job")," abstracts Starwhale Job and enables some information retrieval operations on the job."),(0,r.kt)("h3",{id:"list"},"list"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"list")," is a classmethod that can list the jobs under a project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@classmethod\ndef list(\n    cls,\n    project: str = "",\n    page_index: int = DEFAULT_PAGE_IDX,\n    page_size: int = DEFAULT_PAGE_SIZE,\n) -> Tuple[List[Job], Dict]:\n')),(0,r.kt)("h3",{id:"list-params"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"project"),": (str, optional)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Project URI, can be projects on Standalone/Server/Cloud instances."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"project")," is not specified, the project selected by ",(0,r.kt)("inlineCode",{parentName:"li"},"swcli project selected")," will be used."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"page_index"),": (int, optional)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When getting the jobs list from Server/Cloud instances, paging is supported. This parameter specifies the page number.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Default is 1."),(0,r.kt)("li",{parentName:"ul"},"Page numbers start from 1."))),(0,r.kt)("li",{parentName:"ul"},"Standalone instances do not support paging. This parameter has no effect."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"page_size"),": (int, optional)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When getting the jobs list from Server/Cloud instances, paging is supported. This parameter specifies the number of jobs returned per page.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Default is 1."),(0,r.kt)("li",{parentName:"ul"},"Page numbers start from 1."))),(0,r.kt)("li",{parentName:"ul"},"Standalone instances do not support paging. This parameter has no effect.")))),(0,r.kt)("h3",{id:"list-example"},"Usage Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from starwhale import Job\n\n# list jobs of current selected project\njobs, pagination_info = Job.list()\n\n# list jobs of starwhale/public project in the cloud.starwhale.cn instance\njobs, pagination_info = Job.list("https://cloud.starwhale.cn/project/starwhale:public")\n\n# list jobs of id=1 project in the server instance, page index is 2, page size is 10\njobs, pagination_info = Job.list("https://server/project/1", page_index=2, page_size=10)\n')),(0,r.kt)("h2",{id:"get"},"get"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"get")," is a classmethod that gets information about a specific job and returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Starwhale.Job")," object. It has the same functionality and parameter definitions as the ",(0,r.kt)("inlineCode",{parentName:"p"},"starwhale.job")," function."),(0,r.kt)("h3",{id:"get-example"},"Usage Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from starwhale import Job\n\n# get job object of uri=https://server/job/1\nj1 = Job.get("https://server/job/1")\n\n# get job from standalone instance\nj2 = Job.get("local/project/self/job/xm5wnup")\nj3 = Job.get("xm5wnup")\n')),(0,r.kt)("h2",{id:"summary"},"summary"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"summary")," is a property that returns the data written to the summary table during the job execution, in dict type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef summary(self) -> Dict[str, Any]:\n")),(0,r.kt)("h3",{id:"summary-example"},"Usage Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from starwhale import jobs\n\nj1 = job("https://server/job/1")\n\nprint(j1.summary)\n')),(0,r.kt)("h3",{id:"tables"},"tables"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"tables")," is a property that returns the names of tables created during the job execution (not including the summary table, which is created automatically at the project level), in list type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef tables(self) -> List[str]:\n")),(0,r.kt)("h3",{id:"tables-example"},"Usage Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from starwhale import jobs\n\nj1 = job("https://server/job/1")\n\nprint(j1.tables)\n')),(0,r.kt)("h2",{id:"get_table_rows"},"get_table_rows"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"get_table_rows")," is a method that returns records from a data table according to the table name and other parameters, in iterator type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_table_rows(\n    self,\n    name: str,\n    start: Any = None,\n    end: Any = None,\n    keep_none: bool = False,\n    end_inclusive: bool = False,\n) -> Iterator[Dict[str, Any]]:\n")),(0,r.kt)("h3",{id:"rows-params"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name"),": (str, required)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Datastore table name. The one of table names obtained through the ",(0,r.kt)("inlineCode",{parentName:"li"},"tables")," property is ok."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"start"),": (Any, optional)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The starting ID value of the returned records."),(0,r.kt)("li",{parentName:"ul"},"Default is None, meaning start from the beginning of the table."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"end"),": (Any, optional)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The ending ID value of the returned records."),(0,r.kt)("li",{parentName:"ul"},"Default is None, meaning until the end of the table."),(0,r.kt)("li",{parentName:"ul"},"If both ",(0,r.kt)("inlineCode",{parentName:"li"},"start")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"end")," are None, all records in the table will be returned as an iterator."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keep_none"),": (bool, optional)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Whether to return records with ",(0,r.kt)("inlineCode",{parentName:"li"},"None")," values."),(0,r.kt)("li",{parentName:"ul"},"Default is False."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"end_inclusive"),": (bool, optional)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When ",(0,r.kt)("inlineCode",{parentName:"li"},"end")," is set, whether the iteration includes the ",(0,r.kt)("inlineCode",{parentName:"li"},"end")," record."),(0,r.kt)("li",{parentName:"ul"},"Default is False.")))),(0,r.kt)("h3",{id:"usage-example"},"Usage Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from starwhale import job\n\nj = job(\"local/project/self/job/xm5wnup\")\n\ntable_name = j.tables[0]\n\nfor row in j.get_table_rows(table_name):\n  print(row)\n\nrows = list(j.get_table_rows(table_name, start=0, end=100))\n\n# return the first record from the results table\nresult = list(j.get_table_rows('results', start=0, end=1))[0]\n")))}u.isMDXComponent=!0}}]);